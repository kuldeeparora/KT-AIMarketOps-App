import React, { useState, useEffect } from 'react';
import Head from 'next/head';
import {
  Add as AddIcon,
  Edit as EditIcon,
  Delete as DeleteIcon,
  Visibility as ViewIcon,
  Email as EmailIcon
} from '@mui/icons-material';

export default function UsersManagement() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [users, setUsers] = useState([]);
  const [_loading, _setLoading] = useState(true);
  const [dialogOpen, setDialogOpen] = useState(false);
  const [inviteDialogOpen, setInviteDialogOpen] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [inviteData, setInviteData] = useState({
    email: '',
    name: '',
    role: 'user',
  });
  const [_error, _setError] = useState('');
  const [success, setSuccess] = useState('');

  useEffect(() => {
    if (status === 'loading') return;
    
    if (!session) {
      router.push('/auth/signin');
      return;
    }

    fetchUsers();
  }, [session, status]);

  const fetchUsers = async () => {
    try {
      setLoading(true);
      
      // For development, show mock users
      const mockUsers = [
        {
          id: '1',
          name: 'Admin User',
          email: 'admin@kenttraders.com',
          role: 'admin',
          isActive: true,
          createdAt: new Date().toISOString(),
        },
        {
          id: '2',
          name: 'Test User',
          email: 'test@kenttraders.com',
          role: 'user',
          isActive: true,
          createdAt: new Date().toISOString(),
        },
      ];
      
      setUsers(mockUsers);
    } catch (error) {
      console.error('Error fetching users:', error);
      setError('Failed to fetch users');
    } finally {
      setLoading(false);
    }
  };

  const handleEditUser = (user) => {
    setSelectedUser(user);
    setDialogOpen(true);
  };

  const handleSaveUser = async () => {
    try {
      // For development, just update the local state
      setUsers(prevUsers => 
        prevUsers.map(user => 
          user.id === selectedUser.id ? selectedUser : user)
      );

      setSuccess('User updated successfully');
      setDialogOpen(false);
      setSelectedUser(null);
    } catch (error) {
      console.error('Error updating user:', error);
      setError('Failed to update user');
    }
  };

  const handleDeleteUser = async (userId) => {
    if (window.confirm('Are you sure you want to delete this user?')) {
      try {
        // For development, just remove from local state
        setUsers(prevUsers => prevUsers.filter(user => user.id !== userId));
        setSuccess('User deleted successfully');
      } catch (error) {
        console.error('Error deleting user:', error);
        setError('Failed to delete user');
      }
    }
  };

  const handleInviteUser = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError('');

    try {
      const response = await fetch('/api/auth/invite-user', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          ...inviteData,
          invitedBy: session?.user?.email || 'admin',
        }),
      });

      const result = await response.json();

      if (response.ok) {
        setSuccess('Invitation sent successfully!');
        setInviteDialogOpen(false);
        setInviteData({ email: '', name: '', role: 'user' });
        
        // Add the invited user to the list
        const newUser = {
          id: result.invitation.id,
          name: result.invitation.name,
          email: result.invitation.email,
          role: result.invitation.role,
          isActive: false,
          status: 'pending',
          createdAt: new Date().toISOString(),
        };
        setUsers(prevUsers => [...prevUsers, newUser]);
      } else {
        setError(result.error || 'Failed to send invitation');
      }
    } catch (error) {
      console.error('Error inviting user:', error);
      setError('Failed to send invitation');
    } finally {
      setLoading(false);
    }
  };

  if (status === 'loading' || loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="100vh">
        <CircularProgress />
      </Box>
    );
  }

  if (!session) {
    return null;
  }

  return (
    <>
      <Head>
        <title>User Management - Kent Traders Admin Dashboard</title>
        <meta name="description" content="Manage users in Kent Traders Admin Dashboard" />
      </Head>

      <Container maxWidth="lg" sx={{ py: 4 }}>
        <Box display="flex" justifyContent="space-between" alignItems="center" mb={4}>
          <Typography variant="h4" component="h1">
            User Management
          </Typography>
          <Box>
            <Button
              variant="outlined"
              startIcon={<EmailIcon />}
              onClick={() => setInviteDialogOpen(true)}
              sx={{ mr: 2 }}>
              Invite User
            </Button>
            <Button
              variant="contained"
              startIcon={<AddIcon />}
              onClick={() => router.push('/setup')}
            >
              Add User
            </Button>
          </Box>
        </Box>

        <Alert severity="info" sx={{ mb: 2 }}>,
          <Typography variant="body2">
            <strong>Development Mode:</strong> This page shows mock user data. In production, this would connect to Firebase Firestore.
          </Typography>
        </Alert>

        {error && (
          <Alert severity="error" sx={{ mb: 2 }} onClose={() => setError('')}>
            {error}
          </Alert>
        )}

        {success && (
          <Alert severity="success" sx={{ mb: 2 }} onClose={() => setSuccess('')}>
            {success}
          </Alert>
        )}

        <Paper sx={{ width: '100%', overflow: 'hidden' }}>
          <TableContainer>
            <Table>
              <TableHead>
                <TableRow>
                  <TableCell>Name</TableCell>
                  <TableCell>Email</TableCell>
                  <TableCell>Role</TableCell>
                  <TableCell>Status</TableCell>
                  <TableCell>Created</TableCell>
                  <TableCell>Actions</TableCell>
                </TableRow>
              </TableHead>
              <TableBody>
                {users.map((user) => (
                  <TableRow key={user.id}>
                    <TableCell>{user.name}</TableCell>
                    <TableCell>{user.email}</TableCell>
                    <TableCell>
                      <Chip
                        label={user.role}
                        color={user.role === 'admin' ? 'primary' : 'default'}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      <Chip
                        label={user.status === 'pending' ? 'Pending' : (user.isActive ? 'Active' : 'Inactive')}
                        color={user.status === 'pending' ? 'warning' : (user.isActive ? 'success' : 'error')}
                        size="small"
                      />
                    </TableCell>
                    <TableCell>
                      {new Date(user.createdAt).toLocaleDateString()}
                    </TableCell>
                    <TableCell>
                      <IconButton
                        size="small"
                        onClick={() => handleEditUser(user)}
                        color="primary"
                      >
                        <EditIcon />
                      </IconButton>
                      <IconButton
                        size="small"
                        onClick={() => handleDeleteUser(user.id)}
                        color="error"
                      >
                        <DeleteIcon />
                      </IconButton>
                    </TableCell>
                  </TableRow>
                ))}
              </TableBody>
            </Table>
          </TableContainer>
        </Paper>

        {/* Edit User Dialog */}
        <Dialog open={dialogOpen} onClose={() => setDialogOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle>Edit User</DialogTitle>
          <DialogContent>
            {selectedUser && (
              <Box sx={{ pt: 2 }}>
                <TextField
                  fullWidth
                  label="Name"
                  value={selectedUser.name}
                  onChange={(e) => setSelectedUser({ ...selectedUser, name: e.target.value })}
                  margin="normal"
                />
                <TextField
                  fullWidth
                  label="Email"
                  value={selectedUser.email}
                  disabled
                  margin="normal"
                />
                <TextField
                  fullWidth
                  label="Role"
                  value={selectedUser.role}
                  onChange={(e) => setSelectedUser({ ...selectedUser, role: e.target.value })},
                  margin="normal"
                  select
                  SelectProps={{ native: true }}>
                  <option value="admin">Admin</option>
                  <option value="user">User</option>
                  <option value="manager">Manager</option>
                </TextField>
                <TextField
                  fullWidth
                  label="Status"
                  value={selectedUser.isActive ? 'Active' : 'Inactive'}
                  onChange={(e) => setSelectedUser({ 
                    ...selectedUser, 
                    isActive: e.target.value === 'Active' ,
                  })}
                  margin="normal"
                  select
                  SelectProps={{ native: true }}>
                  <option value="Active">Active</option>
                  <option value="Inactive">Inactive</option>
                </TextField>
              </Box>
            )}
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleSaveUser} variant="contained">
              Save
            </Button>
          </DialogActions>
        </Dialog>

        {/* Invite User Dialog */}
        <Dialog open={inviteDialogOpen} onClose={() => setInviteDialogOpen(false)} maxWidth="sm" fullWidth>
          <DialogTitle>Invite User</DialogTitle>
          <DialogContent>
            <Box component="form" onSubmit={handleInviteUser} sx={{ pt: 2 }}>,
              <TextField
                fullWidth
                label="Full Name"
                value={inviteData.name}
                onChange={(e) => setInviteData({ ...inviteData, name: e.target.value })},
                margin="normal"
                required
              />
              <TextField
                fullWidth
                label="Email"
                type="email"
                value={inviteData.email}
                onChange={(e) => setInviteData({ ...inviteData, email: e.target.value })},
                margin="normal"
                required
              />
              <TextField
                fullWidth
                label="Role"
                value={inviteData.role}
                onChange={(e) => setInviteData({ ...inviteData, role: e.target.value })},
                margin="normal"
                select
                required
              >
                <MenuItem value="user">User</MenuItem>
                <MenuItem value="manager">Manager</MenuItem>
                <MenuItem value="admin">Admin</MenuItem>
              </TextField>
            </Box>
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setInviteDialogOpen(false)}>Cancel</Button>
            <Button onClick={handleInviteUser} variant="contained" disabled={loading}>
              {loading ? <CircularProgress size={20} /> : 'Send Invitation'}
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </>
  );
} 