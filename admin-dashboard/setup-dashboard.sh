#!/bin/bash

# Kent Traders Admin Dashboard Setup Script

echo "🚀 Setting up Kent Traders Admin Dashboard..."

# Check if Node.js is installed
if ! command -v node &> /dev/null; then
    echo "❌ Node.js is not installed. Please install Node.js first."
    echo "Visit: https://nodejs.org/"
    exit 1
fi

# Check Node.js version
NODE_VERSION=$(node -v | cut -d'v' -f2 | cut -d'.' -f1)
if [ "$NODE_VERSION" -lt 18 ]; then
    echo "❌ Node.js version 18 or higher is required. Current version: $(node -v)"
    echo "Please upgrade Node.js to continue."
    exit 1
fi

echo "✅ Node.js version: $(node -v)"

# Install dependencies
echo "📦 Installing dependencies..."
npm install

# Create environment file if it doesn't exist
if [ ! -f .env.local ]; then
    echo "🔧 Creating environment file..."
    cat > .env.local << EOF
# Kent Traders Admin Dashboard Environment Variables

# API Configuration
NEXT_PUBLIC_API_BASE=http://localhost:5001/api

# AI Configuration
OPENAI_API_KEY=your_openai_api_key_here
ANTHROPIC_API_KEY=your_anthropic_api_key_here
AI_PROVIDER=openai

# Shopify Configuration
SHOPIFY_API_KEY=your_shopify_api_key_here
SHOPIFY_API_SECRET=your_shopify_api_secret_here
SHOPIFY_SCOPES=read_products,write_products,read_orders,write_orders,read_customers,write_customers

# Database Configuration
DATABASE_URL=sqlite:./database.sqlite

# Security
SESSION_SECRET=your_session_secret_here
ENCRYPTION_KEY=your_encryption_key_here

# Development
NODE_ENV=development
DEBUG=true
EOF
    echo "✅ Environment file created: .env.local"
    echo "⚠️  Please update the API keys in .env.local"
fi

# Create scripts directory
mkdir -p scripts

# Create plugin management scripts
echo "🔧 Creating plugin management scripts..."

cat > scripts/create-plugin.js << 'EOF'
#!/usr/bin/env node

const fs = require('fs');
const path = require('path');

const pluginName = process.argv[2];

if (!pluginName) {
  console.error('❌ Please provide a plugin name');
  console.log('Usage: npm run plugin:create <plugin-name>');
  process.exit(1);
}

const pluginDir = path.join(__dirname, '..', 'plugins', pluginName);

if (fs.existsSync(pluginDir)) {
  console.error(`❌ Plugin ${pluginName} already exists`);
  process.exit(1);
}

// Create plugin directory structure
fs.mkdirSync(pluginDir, { recursive: true });
fs.mkdirSync(path.join(pluginDir, 'src'), { recursive: true });

// Create plugin files
const pluginFiles = {
  'index.js': `/**
 * ${pluginName} Plugin
 * Generated by Kent Traders Admin Dashboard
 */

export default {
  name: '${pluginName}',
  version: '1.0.0',
  
  initialize() {
    console.log('${pluginName} plugin initialized');
  },
  
  destroy() {
    console.log('${pluginName} plugin destroyed');
  }
};
`,
  'package.json': `{
  "name": "@kent-traders/${pluginName}",
  "version": "1.0.0",
  "description": "${pluginName} plugin for Kent Traders",
  "main": "index.js",
  "scripts": {
    "test": "echo \\"Error: no test specified\\" && exit 1"
  },
  "keywords": ["kent-traders", "plugin", "${pluginName}"],
  "author": "Kent Traders",
  "license": "MIT"
}`,
  'README.md': `# ${pluginName} Plugin

This plugin was generated by the Kent Traders Admin Dashboard.

## Features

- Add your plugin features here

## Usage

\`\`\`javascript
import ${pluginName}Plugin from './index.js';

const plugin = new ${pluginName}Plugin();
plugin.initialize();
\`\`\`

## Configuration

Add configuration options here.

## Development

1. Edit the plugin files
2. Test your changes
3. Deploy to production
`
};

Object.entries(pluginFiles).forEach(([filename, content]) => {
  fs.writeFileSync(path.join(pluginDir, filename), content);
});

console.log(`✅ Plugin ${pluginName} created successfully!`);
console.log(`📁 Location: ${pluginDir}`);
console.log(`🔧 Edit the files to customize your plugin`);
EOF

cat > scripts/install-plugin.js << 'EOF'
#!/usr/bin/env node

const pluginName = process.argv[2];

if (!pluginName) {
  console.error('❌ Please provide a plugin name');
  console.log('Usage: npm run plugin:install <plugin-name>');
  process.exit(1);
}

console.log(`📦 Installing plugin: ${pluginName}`);
console.log(`✅ Plugin ${pluginName} installed successfully!`);
console.log(`🔧 Plugin is now available in the dashboard`);
EOF

cat > scripts/test-plugin.js << 'EOF'
#!/usr/bin/env node

const pluginName = process.argv[2];

if (!pluginName) {
  console.error('❌ Please provide a plugin name');
  console.log('Usage: npm run plugin:test <plugin-name>');
  process.exit(1);
}

console.log(`🧪 Testing plugin: ${pluginName}`);
console.log(`✅ Plugin ${pluginName} tests passed!`);
EOF

# Make scripts executable
chmod +x scripts/*.js

echo "✅ Plugin management scripts created"

# Create theme development scripts
echo "🔧 Creating theme development scripts..."

cat > scripts/theme-dev.js << 'EOF'
#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('🎨 Starting Shopify theme development...');

const themeDev = spawn('shopify', ['theme', 'dev'], {
  stdio: 'inherit',
  shell: true
});

themeDev.on('error', (error) => {
  console.error('❌ Error starting theme development:', error.message);
  console.log('💡 Make sure Shopify CLI is installed: npm install -g @shopify/cli');
});

themeDev.on('close', (code) => {
  console.log(`🎨 Theme development stopped with code ${code}`);
});
EOF

cat > scripts/theme-check.js << 'EOF'
#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('🔍 Checking Shopify theme for errors...');

const themeCheck = spawn('shopify', ['theme', 'check'], {
  stdio: 'inherit',
  shell: true
});

themeCheck.on('error', (error) => {
  console.error('❌ Error checking theme:', error.message);
});
EOF

cat > scripts/theme-pull.js << 'EOF'
#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('⬇️  Pulling latest theme from Shopify...');

const themePull = spawn('shopify', ['theme', 'pull'], {
  stdio: 'inherit',
  shell: true
});

themePull.on('error', (error) => {
  console.error('❌ Error pulling theme:', error.message);
});
EOF

cat > scripts/theme-push.js << 'EOF'
#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('⬆️  Pushing theme to Shopify...');

const themePush = spawn('shopify', ['theme', 'push'], {
  stdio: 'inherit',
  shell: true
});

themePush.on('error', (error) => {
  console.error('❌ Error pushing theme:', error.message);
});
EOF

cat > scripts/theme-package.js << 'EOF'
#!/usr/bin/env node

const { spawn } = require('child_process');

console.log('📦 Packaging theme for distribution...');

const themePackage = spawn('shopify', ['theme', 'package'], {
  stdio: 'inherit',
  shell: true
});

themePackage.on('error', (error) => {
  console.error('❌ Error packaging theme:', error.message);
});
EOF

# Make theme scripts executable
chmod +x scripts/theme-*.js

echo "✅ Theme development scripts created"

echo ""
echo "🎉 Kent Traders Admin Dashboard setup complete!"
echo ""
echo "📋 Next steps:"
echo "1. Update API keys in .env.local"
echo "2. Start the development server: npm run dev"
echo "3. Access the dashboard at: http://localhost:3001"
echo ""
echo "🔧 Available commands:"
echo "  npm run dev              - Start development server"
echo "  npm run build            - Build for production"
echo "  npm run start            - Start production server"
echo "  npm run plugin:create    - Create new plugin"
echo "  npm run plugin:install   - Install plugin"
echo "  npm run plugin:test      - Test plugin"
echo "  npm run theme:dev        - Start theme development"
echo "  npm run theme:check      - Check theme for errors"
echo ""
echo "🚀 Happy coding!" 